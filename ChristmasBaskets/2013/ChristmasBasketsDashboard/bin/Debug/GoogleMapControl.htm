<!DOCTYPE html>
<html>
   <head>
      <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
      <style type="text/css">
         html { height: 100% }
         body { height: 100%; margin: 0; padding: 0 }
         #map_canvas { height: 100% }
      </style>
      <!--[if IE]> <script type="text/javascript" src="ie-set_timeout.js"></script> <![endif]-->
      <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
      <script type="text/javascript">

      var geocoder;
      var map;
      var markers = [];
      var showMarkerMode = 2;	//0 = All Clients, 1 = Only Assigned Clients, 2 = Only Unassigned Clients, 3 = Current Deliverer Assigned and Unassigned Clients, 4 = Only Current Deliverer Assigned Clients
      var assignedClientToCurrentDelivererImage = "AssignedClientToCurrentDeliverer.png";
      var assignedClientToOtherDelivererImage = "AssignedClientToOtherDeliverer.png";
      var unassignedClientImage = "UnassignedClient.png";
      var mapCenterAddress = "2147 Dale Avenue Southeast Roanoke, VA 24013";
      var addresses = ["3828 Shadylawn Ave., NW, Apt. 2 Roanoke, VA  24012","1127 14th Street S.E. Roanoke, VA  24013","1932 Wise Ave. S.E. Roanoke, VA  24013","808 Dent Ave., SE Roanoke, VA  24013","1514 Church Ave., S.E. Roanoke, VA  24013","1327 Morton Ave. SE Roanoke, VA  24013","1523 Queen Ann Dr., S.E. Roanoke, VA  24014","1529 Queen Ann Drive SE ROANOKE, VA  24014","331 Harrison Ave. N.W. Roanoke, VA  24016","5217 Airport Road NW   Roanoke, VA  24012","3469 Yellow Mountain Road  Roanoke, VA  24014","1378 Buena Vista Blvd., S.E. Roanoke, VA  24013","1236 Greenhurst Ave. NW Roanoke, VA  24012","306 Hackley Avenue NW Roanoke, VA  24016","1418 Wise Ave. S.E. Roanoke, VA  24013","1835 Court St., N.W.  Roanoke, VA  24012","1513 9th Street SE Roanoke, VA  24013","2714  Sand Road NE Roanoke, VA  24017","2692 Eastland RD  Roanoke , VA  24012","5506 Darby Rd. NW Roanoke, VA  24012","3294 Pitzer Road Roanoke, VA  24014","3306 Mt Pleasant Blvd Lot 5 Roanoke , VA  24014","2810 Sha-al Road Roanoke, VA  24014","4121 Yellow Mountain Road  Roanoke, VA  24014"];
      var clients = ["4472 - Blevins, Donna","4382 - Demetres , Elizabeth","4480 - Doyle, Michael","4482 - Ferris, Sarah","4493 - Jenkins, Winfred","4411 - Kimble, Antoinette","4243 - Mukuay, Achol","3217 - MYERS, BETTY","4509 - Reynolds, Shirley","4517 - Stapleton, Patricia","4446 - Stevens, Vivian","3931 - Stinnett, Gloria","4519 - Terry, Eunice","4452 - Thompson, Corine","4520 - Turner, Robert","3937 - Walton, Dorothy ","4524 - Whelling, Della","4281 - Williams, Willie","4286 - Bailey , Dorothy","4535 - Marsh, Tonya","4541 - Blankenship, Frances","4346 - Thornhill , Charlotte","4626 - Hayth, Frances","4629 - Hoback, Lauren"];
      var clientsAssigned = ["0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"];  //0 - Client unassigned, 1 - client assigned to current deliverer the htm file represents, 2 - client assigned to another deliverer other than current deliverer htm file represents
      var clientIDs = ["4472","4382","4480","4482","4493","4411","4243","3217","4509","4517","4446","3931","4519","4452","4520","3937","4524","4281","4286","4535","4541","4346","4626","4629"];

      function initialize()
      {
         //Create map options
         var myOptions = {mapTypeId: google.maps.MapTypeId.ROADMAP};

         //Create map and geocoder
         map = new google.maps.Map(document.getElementById("map_canvas"),myOptions);
         geocoder = new google.maps.Geocoder();
         //Show all addresses
         for (i in clients)
         {
            address = addresses[i];
            client = clients[i];
            clientAssigned = clientsAssigned[i];
            delay = i * 1000;
            setTimeout(showAddress, delay, address, client, clientAssigned);
         }

         //Center the Map
         centerMap(mapCenterAddress, 12);
      }

      //Show a single address with client info
      function showAddress(address, client, assigned)
      {
          geocoder.geocode( { 'address': address},
                              function(results, status)
                              {
                                 //Make sure we got a good result
                                 if (status == google.maps.GeocoderStatus.OK)
                                 {
                                    //Temporary working marker
                                    var marker;

                                    //Create and display marker based on assigned status
                                    if(assigned == "0")
                                    {
                                       //Client is not assigned to any deliverer
                                       marker = new google.maps.Marker({map: map, position: results[0].geometry.location, title: client + "\n" + address, icon: unassignedClientImage});
                                    }
                                    else if(assigned == "1")
                                    {
                                       //Client is assigned to current deliverer
                                       marker = new google.maps.Marker({map: map, position: results[0].geometry.location, title: client + "\n" + address, icon: assignedClientToCurrentDelivererImage});
                                    }
                                    else if(assigned == "2")
                                    {
                                       //Client is assigned to another deliverer other than current
                                       marker = new google.maps.Marker({map: map, position: results[0].geometry.location, title: client + "\n" + address, icon: assignedClientToOtherDelivererImage});
                                    }

                                    //Determine if we should show the Marker based on showMarkerMode

                                    //Show All Clients
                                    if(showMarkerMode == 0)
                                    {
                                       marker.setMap(map);
                                    }
                                    //Show Only Assigned Clients
                                    else if(showMarkerMode == 1 || showMarkerMode == 4)
                                    {
                                       //If the client is not assigned - do not show on the map
                                       if(assigned == "0")
                                       {
                                          marker.setMap(null);
                                       }
                                       else
                                       {
                                          marker.setMap(map);
                                       }
                                    }
                                    //Show Only Unassigned Clients
                                    else if(showMarkerMode == 2)
                                    {
                                       //If the client is assigned - do not show on the map
                                       if(assigned != "0")
                                       {
                                          marker.setMap(null);
                                       }
                                       else
                                       {
                                          marker.setMap(map);
                                       }
                                    }
                                    //Show Only Unassigned Clients and Clients that below to current Deliverer
                                    else if(showMarkerMode == 3)
                                    {
                                       //If the client is assigned to the current deliverer or Unassigned - show on the map
                                       if(assigned == "0"  || assigned == "1")
                                       {
                                          marker.setMap(map);
                                       }
                                       else
                                       {
                                          marker.setMap(null);
                                       }
                                    }

                                    //Add marker to marker array
                                    markers.push(marker);
                                 }
                                 else
                                 {
                                    //Alert - Geocode not successful
                                    alert("showAddress - Geocode of (" + address + ") was not successful for the following reason: (" + status + ")");
                                 }
                              });
      }

      //Show a single address with client info
      function centerMap(address, zoom)
      {
         geocoder.geocode( { 'address': address},
                           function(results, status)
                           {
                              //Make sure we got a good result
                              if (status == google.maps.GeocoderStatus.OK)
                              {
                                 //Center Map
                                 map.setCenter(results[0].geometry.location);

                                 //Set Map Zoom
                                 map.setZoom(zoom);
                              }
                              else
                              {
                                 //Alert - Geocode not successful
                                 alert("centerMap - Geocode of (" + address + ") was not successful for the following reason: (" + status + ")");
                              }
                           });
      }

      //Assign Client
      function assignClient(clientID)
      {
         var clientIndex = -1;

         //Find index for Client in the ClientIDs array
         for(i in clientIDs)
         {
            if(clientIDs[i] == clientID)
            {
               clientIndex = i;
               break;
            }
         }
         //See if clientIndex was found
         if(clientIndex > -1)
         {
            if(markers)
            {
               //Alter Marker
               markers[clientIndex].setIcon(assignedClientToCurrentDelivererImage);

               //Determine if we should show the Marker based on showMarkerMode

               //Show All Clients
               if(showMarkerMode == 0)
               {
               //We are assigning a client and we should display All Clients - show clinet on the map
               markers[clientIndex].setMap(map);
               }
               //Show Only Assigned Clients
               else if(showMarkerMode == 1  || showMarkerMode == 4)
               {
                  //We are assigning a client and we should display only Assigned Clients - show client on the map
                  markers[clientIndex].setMap(map);
               }
               //Show Only Unassigned Clients
               else if(showMarkerMode == 2)
               {
                  //We are assigning a client and we should display only UnassignedClients - do not show client on the map
                  markers[clientIndex].setMap(null);
               }

               //Update clients Assigned
               clientsAssigned[clientIndex] = "1";
            }
            else
            {
               //Alert - markers[] is null
               alert("assignClient - markers[] is null");
            }
         }
         else
         {
         //Alert - clientID does not exits
         alert("assignClient - ClientID (" + clientID + ") not found in ClientIDs array");
         }
      }

      //Unassign Client
      function unassignClient(clientID)
      {
         var clientIndex = -1;

         //Find index for Client in the ClientIDs array
         for(i in clientIDs)
         {
            if(clientIDs[i] == clientID)
            {
               clientIndex = i;
               break;
            }
         }
         //See if clientIndex was found
         if(clientIndex > -1)
         {
            if(markers)
            {
               //Alter Marker
               markers[clientIndex].setIcon(unassignedClientImage);

               //Determine if we should show the Marker based on showMarkerMode

               //Show All Clients
               if(showMarkerMode == 0)
               {
               //We are unassigning a client and we should display All Clients - show clinet on the map);
               markers[clientIndex].setMap(map);
               }
               //Show Only Assigned Clients
               else if(showMarkerMode == 1  || showMarkerMode == 4)
               {
                  //We are unassigning a client and we should display only Assigned Clients - do not show client on the map
                  markers[clientIndex].setMap(null);
               }
               //Show Only Unassigned Clients
               else if(showMarkerMode == 2)
               {
                  //We are unassigning a client and we should display only UnassignedClients - show client on the map
                  markers[clientIndex].setMap(map);
               }

               //Update clients Assigned
               clientsAssigned[clientIndex] = "0";
            }
            else
            {
               //Alert - markers[] is null
               alert("unassignClient - markers[] is null");
            }
         }
         else
         {
         //Alert - clientID does not exits
         alert("unassignClient - ClientID (" + clientID + ") not found in ClientIDs array");
         }
      }
      </script>
   </head>

   <body onload="initialize()">
      <div id="map_canvas" style="height:90%;top:30px"></div>
   </body>
</html>
